CHAOS ENGINEER

1. If we have automation tests, what's the value of a chaos engineer?

Automation tests are great for continuous regression testing, unit testing, integration testing and any kind of repeatable tests that would expose if something suddenly started behaving differently.  A chaos engineer is more interested in intentionally breaking certain parts of the system to see how resilient the overall architecture is.  How the architecture behaves if it loses connectivity to a given service, or database, or network, or internet access, etc.  The overall architecture should be designed in a fault-tolerant enough way that even if the system is slightly degraded in one area or another, the system has a fallback or recovery mode that it continues to operate in using as least disruptive of a way as possible.  A chaos engineer's role is to expose these weaknesses in resiliency and help the chief architect design for and elegantly handle these disruptions within the system.

2. What are good traits of a chaos engineer?

An engineer who is good at analyzing a system, finding it's weak spots and exploiting them.  In addition to exploiting weak points within an architecture, a good chaos engineer would be able to monitor, measure and quantify the parts of the system that were compromised, for how long and in which ways.  Making these measurements accurately over iterative changes will help show improvement or decline in changes to the system made to be more resilient to these outages.  The premise is not whether systems will fail, but rather that they definitely will.  The question is how elegantly will the architecture deal with these failings, no matter how severe they are?  Are these systems giving the best possible experience they can based on the services and connectivity they have available to them?  I think these are the traits that make up a good chaos engineer and the mindset they must have.

3. Would you run a chaos experiment on a live system?  If you would, what if it negatively impacted the users of the system?

Yes, but only under certain circumstances.  It would only happen over time, after a lot of very controlled chaotic experiments in non-production environments.  It would be important to validate the assumptions and improvements learned in other environments by testing on a live system at some point, but only with extreme caution.  Negatively impacting users of the system is always a risk when running any tests or changes in production.  The chaos would have to be very well tested in non-production environments first, and even in production likely be conducted off-peak hours with sound contingency plans.  If the chaos testing was done in very controlled ways at first to smaller segments of the architecture, then eventually those very small subsets could be integrated into larger chaos tests.  This would be pending compliance requirements, management requirements and any other company-wide policies relative to this type of experiment in the production environment.